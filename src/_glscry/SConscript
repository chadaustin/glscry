Import('*')

sources = Split("""
    Module.cpp
    OpenGL.cpp

    Action.cpp
    Context.cpp
    Coverage.cpp
    glew.c
    GLUtility.cpp
    Platform.cpp
    Timer.cpp

    Array.cpp
    Geometry.cpp

    StateSet.cpp
    State.cpp
    BlendState.cpp
    ColorBufferState.cpp
    DepthState.cpp
    LightState.cpp
    LineState.cpp
    MaterialState.cpp
    TextureState.cpp

    Test.cpp

    TextureMemoryTest.cpp
    TextureUploadTest.cpp

    PixelTransferTest.cpp
    CopyPixelTest.cpp
    DrawPixelTest.cpp
    ReadPixelTest.cpp

    GeometryTest.cpp
    ImmediateTest.cpp
    DisplayListTest.cpp
    VertexArrayTest.cpp
    CompiledVertexArrayTest.cpp
    VertexBufferObjectTest.cpp
""")

headers = Split("""
    Version.h
    Platform.h

    OpenGL.cpp
    GLUtility.h
    glew.h
    glxew.h
    wglew.h

    Action.h
    Array.h
    Context.h
    Coverage.h
    Geometry.h
    LokiTypeInfo.h
    RefCounted.h
    ScopeGuard.h
    Timer.h
    Types.h
    Utility.h

    State.h
    StateSet.h

    BlendState.h
    ColorBufferState.h
    DepthState.h
    LightState.h
    LineState.h
    MaterialState.h
    TextureState.h
    
    Test.h
    
    TextureMemoryTest.h
    TextureUploadTest.h

    PixelTransferTest.h
    CopyPixelTest.h
    DrawPixelTest.h
    ReadPixelTest.h

    GeometryTest.h
    CompiledVertexArrayTest.h
    DisplayListTest.h
    ImmediateTest.h
    VertexArrayTest.h
    VertexBufferObjectTest.h
""")

if env['PLATFORM'] == 'win32':
    sources.append('CPUInfo.cpp')
    headers.append('CPUInfo.h')

BuildData['NativeSources'] = map(File, sources + headers)

env = env.Copy()
env.Append(LIBPATH=['gmtl-python'], LIBS=['gmtl-python'])

modulename = File(env.subst('_glscry$SHLIBSUFFIX'))
module = env.SharedLibrary(modulename, sources)
BuildData['NativeModule'] = module

# Don't install all of the generated files, just the native module.
env.Install(TargetDirectory, modulename)

SConscript(dirs=['gmtl-python'])
